rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

function isParticipantInPrivateChat(chatId) {
      let chat = get(/databases/$(database)/documents/private_chats/$(chatId)).data;
      return chat != null && (request.auth.uid in chat.users);
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write, update, create:  if request.auth != null 
                                    && request.auth.uid == userId
                                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['active_course', 'display_name']);
    }
    
    match /courses/{courseId} {
      allow read: if request.auth != null;

      // If you want to prevent users from getting the correct answer from the network
      match /questions/{questionId} {
        allow read:   if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.authorId
                      && request.resource.data.keys().hasAll(['authorId', 'reviewed', 'question_text', 'answer_a', 'answer_b', 'answer_c', 'answer_d', 'correct_answer', 'reviewerID']);
        allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']))
                      && request.auth != null 
                      && request.auth != request.resource.data.authorId;
        
        match /restricted/correct_answer {
          // TODO allow read: 
          allow create: if request.resource.data.authorId == request.auth.uid
                        && get(/databases/$(database)/documents/courses/$(courseId)/questions/$(questionId)).data.authorId == request.auth.uid;
        }
      }
    }
    
    
    match /lobby_chats/{courseId} {
      allow read: if request.auth != null;
      
      // TODO Content validation, i.e. number of characters
      match /messages/{messageId} {
        allow read:   if request.auth != null;
        allow create: if request.auth != null
                      && request.resource.data.keys().hasAll(['text', 'authorId', 'authorName', 'timestamp'])
                      && request.resource.data.authorId == request.auth.uid;
      }
    }

    match /private_chats/{chatId} {
      allow read, create: if request.auth != null;
      allow write: if request.auth != null && isParticipantInPrivateChat(chatId);
      
      match /messages/{messageId} {
        allow read:   if request.auth != null && isParticipantInPrivateChat(chatId);
        allow create: if request.auth != null 
                      && isParticipantInPrivateChat(chatId)
                      && request.resource.data.keys().hasAll(['text', 'authorId', 'authorName', 'timestamp'])
                      && request.resource.data.authorId == request.auth.uid;
      }
    }
  }
}